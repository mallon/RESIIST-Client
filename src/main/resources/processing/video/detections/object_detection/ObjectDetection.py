#!/usr/bin/env python
# coding: utf-8

import numpy
import os
import six.moves.urllib as urllib
import sys
import tarfile
import tensorflow.compat.v1 as tensorflow
tensorflow.disable_v2_behavior()
import zipfile
import sys
import socket
import time
import math
import threading
import argparse
from multiprocessing import Process
from collections import defaultdict
from io import StringIO
from matplotlib import pyplot as plt
from PIL import Image

import label_map_util

import logging;
logging.disable(logging.INFO);
logging.disable(logging.DEBUG);
#logging.disable(logging.CRITICAL);
logging.disable(logging.WARNING);
#logging.disable(logging.ERROR);

import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'  # or any {'0', '1', '2'}
import tensorflow as tf
  #Level | Level for Humans | Level Description                  
 #-------|------------------|------------------------------------ 
  #0     | DEBUG            | [Default] Print all messages       
  #1     | INFO             | Filter out INFO messages           
  #2     | WARNING          | Filter out INFO & WARNING messages 
  #3     | ERROR            | Filter out all messages   

#For Java caller
CURRENT_PYTHON_PATH=os.getcwd() + "/src/main/resources"
EXTRACTION_TO_INTEGRATION_PATH = CURRENT_PYTHON_PATH + '/processing/video/detections/'
SPECIFIC_PATH=EXTRACTION_TO_INTEGRATION_PATH + '/object_detection/trainedModelAndLabels/'

#required model and the frozen inference graph generated by Tensorflow 
# What model to download.
MODEL_PATH = SPECIFIC_PATH + 'ssd_mobilenet_v1_coco_2017_11_17'

# Path to frozen detection graph. This is the actual model that is used for the object detection.
PATH_TO_FROZEN_GRAPH = MODEL_PATH + '/frozen_inference_graph.pb'

# List of the strings that is used to add correct label for each box.
#PATH_TO_LABELS = os.path.join('data', SPECIFIC_PATH + 'data/mscoco_label_map.pbtxt')
PATH_TO_LABELS = SPECIFIC_PATH + 'mscoco_label_map.pbtxt'

# Size, in inches, of the output images.
IMAGE_SIZE = (12, 8)

INTEGRATION_NETWORK_ADRESS = '127.0.0.1'
INTEGRATION_NETWORK_PORT = 8081

#load all the labels
category_index = label_map_util.create_category_index_from_labelmap(PATH_TO_LABELS, use_display_name=True)


def getFrozenGraphOfTargetedModel(frozenGraphPath):        
    detection_graph = tensorflow.Graph()
    with detection_graph.as_default():
      od_graph_def = tensorflow.GraphDef() 
      # 'b' for right on block special file
      # special file ==> file read by a particular driver device
      with tensorflow.gfile.GFile(frozenGraphPath, 'rb') as fileInput:
        serialized_graph = fileInput.read()
        od_graph_def.ParseFromString(serialized_graph)
        tensorflow.import_graph_def(od_graph_def, name='')
        
    return detection_graph

frozenGraph = getFrozenGraphOfTargetedModel(PATH_TO_FROZEN_GRAPH)

#run the inference on all the input images one by one
#provide us the output of images in which objects are 
#detected with labels and the percentage/score of that
#object being similar to the training data.
def startDetection(frameToAnalyse, objectNameToDetectList, allElementIds):
    print("Starting object detection...")
    #for frameToAnalyse in copiedFrames:  
    frameToAnalyseExpanded = numpy.expand_dims(frameToAnalyse, axis=0)
    with frozenGraph.as_default():
      with tensorflow.Session() as sess:
          
        # Definite input and output Tensors for detection_graph
        image_tensor = frozenGraph.get_tensor_by_name('image_tensor:0')
        
        # Each box represents a part of the image where a particular object was detected.
        detection_boxes = frozenGraph.get_tensor_by_name('detection_boxes:0')
        
        # Each score represent how level of confidence for each of the objects.
        # Score is shown on the result image, together with the class label.
        detection_scores = frozenGraph.get_tensor_by_name('detection_scores:0')
        detection_classes = frozenGraph.get_tensor_by_name('detection_classes:0')
        num_detections = frozenGraph.get_tensor_by_name('num_detections:0')
        
        # Actual detection.
        (boxes, scores, classes, nums) = sess.run(
                 [detection_boxes, detection_scores, detection_classes, num_detections],
                 feed_dict={image_tensor: frameToAnalyseExpanded})
        
    counter=0
    vehiculesToDetectList = []
    isMotorizedVehiculeDetection = False
    if "vehicules" in objectNameToDetectList:
        vehiculesToDetectList.append("bus")
        vehiculesToDetectList.append("truck")
        vehiculesToDetectList.append("car")
        vehiculesToDetectList.append("motorcycle")
        
    for index,value in enumerate(classes[0]):
        categoryName = category_index.get(value)['name']
        if scores[0,index] > 0.5 and (categoryName in objectNameToDetectList or categoryName in vehiculesToDetectList):
            if categoryName in vehiculesToDetectList:
                isMotorizedVehiculeDetection = True
            counter = counter+1
    
    if counter != 0:
        if isMotorizedVehiculeDetection:
            print("[INFO] Detected vehicule number : " + str(counter))
            #logging.info("[INFO] Detected vehicule number : " + str(counter))
            label_crit_value = [allElementIds[objectNameToDetectList.index("vehicules")], "vehicules", str(counter)]
            isMotorizedVehiculeDetection = False
        else:
            print("[INFO] Detected person number : " + str(counter))
            #logging.info("[INFO] Detected person number : " + str(counter))
            label_crit_value = [allElementIds[objectNameToDetectList.index(categoryName)], categoryName, str(counter)]
            #label_crit_value = [elementId, objectNameToDetectList[0], str(counter)]
            
        label_crit_value_string = ','.join(label_crit_value)
        
        print("HERE -- " + label_crit_value_string)
                
        our_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        our_socket.connect( (INTEGRATION_NETWORK_ADRESS, INTEGRATION_NETWORK_PORT) ) 
        msg = label_crit_value_string + "\r\n"
        our_socket.send(msg.encode('utf8'))
        our_socket.close()
    else :
        for objectToDetect in objectNameToDetectList :
            higher_proba_label_crit_value = [allElementIds[objectNameToDetectList.index(categoryName)], categoryName, "0"]                
            higher_proba_label_crit_value_string = ','.join(higher_proba_label_crit_value)   
                         
            print(higher_proba_label_crit_value_string)             
                         
            our_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            our_socket.connect( (INTEGRATION_NETWORK_ADRESS, INTEGRATION_NETWORK_PORT) ) 
            msg = higher_proba_label_crit_value_string + "\r\n"
            our_socket.send(msg.encode('utf8'))
            our_socket.close()